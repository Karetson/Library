book:
- count: ile dostepnych ksiazek
- String(255 znakow) opis

user:
- potwierdzenie maila (optional)
- registry: bcrypt
- login: token, bcrypt
- logout
- update: @requestbody z id, dto dla edycji, bez edycji maila,
- ban

exceptiony:
- zbieranie wiekszego zakresu wyjatkow

security:
- token
- potwierdzenie maila
- bcrypt

others:
- logging
- Http headers
- testy
- DTO

:::NOWE_ENCJE:::
wypozyczenie:
- pola (Long id, User userid, Book bookid, LocalDateTime createdAt, Date(?) expired, Boolean status)
- POST(@reqparam: userid, bookid) [utworzenie wypozyczenia za pomoca userid, bookid, expired=createdAt+30, status=true(default | active), zmienic amoount-1] - wypozyczenie ksiazki
- GET(@reqparam: userid) [znalezc userid, wyswietlic wszystkie wypozyczenia tego userid jesli status=true] - aktywne wypozyczenia
- GET(@reqparam userid) [znalezc userid, wyswietl wszystkie wypozyczenia tego userid jesli status=false] - historia wypozyczen
- PUT(@reqparam: wypozyczenieid) [znalezc wypozyczenieid, zmienic status=false(ended), zmienic amount+1] - oddanie ksiazki

favoriteBooks:
- pola (Long id, User userid, Book bookid)
- POST (@reqparam userid, bookid) [utworzenie favoriteBook za pomoca userid, bookid] - dodaje do ulubionych ksiazek
- GET (@reqparam userid) [znalezc userid, wyswietlic wszystkie favoritBook tego userid] - lista ulubionych ksiazek
- DEL(@reqparam favoriteBookid) [znalezc favoriteBookid, usunac favoriteBookid] - usuniecie z ulubionych ksiazek

genre:
- pola (Long id, BookGenre genre)
- POST (@reqparam genre) [utworzenie genre] - dodanie gatunku
- GET () [wyswietlic wszystkie genre] - odczyt wszystkich gatunkow
- DEL (@reqparam genreid) [znalezc genreid, usun genreid] - usuwanie gatunku
